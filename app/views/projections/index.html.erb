<div class="col-xs-12 col-md-9" style="height:100%;">

<!--   <div id="explain">
    As of March 20th, 2016, I am suspending work on The Fed Project. While I'd love to continue updating statements and projections,
    right now I simply don't have the time to juggle multiple side projects simultaneously. I hope to take this back up at some future date,
    but as of now I have no specific plans to do so. Thanks again for visiting!
  </div> -->

  <h1><%= number_with_delimiter(Projection.count) %></h1>
  <small>individual projections</small>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div id="test-chart">
  </div>
  <script>
    function LineChart(data, {
      x = ([x]) => x, // given d in data, returns the (temporal) x-value
      y = ([, y]) => y, // given d in data, returns the (quantitative) y-value
      defined, // for gaps in data
      curve = d3.curveLinear, // method of interpolation between points
      marginTop = 20, // top margin, in pixels
      marginRight = 30, // right margin, in pixels
      marginBottom = 30, // bottom margin, in pixels
      marginLeft = 40, // left margin, in pixels
      width = 1200, // outer width, in pixels
      height = 400, // outer height, in pixels
      xType = d3.scaleUtc, // the x-scale type
      xDomain, // [xmin, xmax]
      xRange = [marginLeft, width - marginRight], // [left, right]
      yType = d3.scaleLinear, // the y-scale type
      yDomain, // [ymin, ymax]
      yRange = [height - marginBottom, marginTop], // [bottom, top]
      yFormat =  ".2f", // a format specifier string for the y-axis
      yLabel, // a label for the y-axis
      color = "currentColor", // stroke color of line
      strokeLinecap = "round", // stroke line cap of the line
      strokeLinejoin = "round", // stroke line join of the line
      strokeWidth = 1.5, // stroke width of line, in pixels
      strokeOpacity = 1, // stroke opacity of line
    } = {}) {
      // Compute values.
      const X = d3.map(data, x);
      const Y = d3.map(data, y);
      const I = d3.range(X.length);
      if (defined === undefined) defined = (d, i) => !isNaN(X[i]) && !isNaN(Y[i]);
      const D = d3.map(data, defined);

      // Compute default domains.
      if (xDomain === undefined) xDomain = d3.extent(X);
      if (yDomain === undefined) yDomain = [0, d3.max(Y)];

      // Construct scales and axes.
      const xScale = xType(xDomain, xRange);
      const yScale = yType(yDomain, yRange);
      const xAxis = d3.axisBottom(xScale).ticks(width / 80).tickSizeOuter(0);
      const yAxis = d3.axisLeft(yScale).ticks(height / 40, yFormat);

      // Construct a line generator.
      const line = d3.line()
          .defined(i => D[i])
          .curve(curve)
          .x(i => xScale(X[i]))
          .y(i => yScale(Y[i]));

      const svg = d3.create("svg")
          .attr("width", width)
          .attr("height", height)
          .attr("viewBox", [0, 0, width, height])
          .attr("style", "max-width: 100%; height: auto; height: intrinsic;");

      svg.append("g")
          .attr("transform", `translate(0,${height - marginBottom})`)
          .call(xAxis);

      svg.append("g")
          .attr("transform", `translate(${marginLeft},0)`)
          .call(yAxis)
          .call(g => g.select(".domain").remove())
          .call(g => g.selectAll(".tick line").clone()
              .attr("x2", width - marginLeft - marginRight)
              .attr("stroke-opacity", 0.1))
          .call(g => g.append("text")
              .attr("x", -marginLeft)
              .attr("y", 10)
              .attr("fill", "currentColor")
              .attr("text-anchor", "start")
              .text(yLabel));

      svg.append("path")
          .attr("fill", "none")
          .attr("stroke", color)
          .attr("stroke-width", strokeWidth)
          .attr("stroke-linecap", strokeLinecap)
          .attr("stroke-linejoin", strokeLinejoin)
          .attr("stroke-opacity", strokeOpacity)
          .attr("d", line(I));

          return svg.node();
    }

    d3.json("http://localhost:3000/d3_get_chart_source_data.json")
      .then(function(data) {

        chart = LineChart(data.actual_rates, {
          x: d => Date.parse(d.rate_date),
          y: d => d.actual_rate,
          yLabel: "↑ Fed funds rate (%)",
          height: 500,
          color: "steelblue"
        });

        document.getElementById('test-chart').append(chart);

    });

  </script>

  <div id="test-chart-2">
  </div>

  <script>

    // data = Object.assign(d3.csvParse("date,projected,mean,upper,lower\n2020-02-26,false,2,2,2\n2020-02-27,false,1,1,1\n2020-02-28,false,2,2,2\n2020-02-29,false,1,1,1\n2020-03-01,false,3,3,3\n2020-03-02,false,2,2,2\n2020-03-03,false,4,4,4\n2020-03-04,false,3,3,3\n2020-03-05,false,4,4,4\n2020-03-06,false,6,6,6\n2020-03-08,false,8,8,8\n2020-03-09,false,4,4,4\n2020-03-10,false,4,4,4\n2020-03-11,false,6,6,6\n2020-03-12,false,6,6,6\n2020-03-13,false,3,3,3\n2020-03-14,false,10,10,10\n2020-03-15,false,10,10,10\n2020-03-16,false,24,24,24\n2020-03-17,false,24,24,24\n2020-03-18,false,15,15,15\n2020-03-19,false,72,72,72\n2020-03-20,false,47,47,47\n2020-03-21,false,57,57,57\n2020-03-22,false,126,126,126\n2020-03-23,false,116,116,116\n2020-03-24,false,158,158,158\n2020-03-25,false,230,230,230\n2020-03-26,false,266,266,266\n2020-03-27,false,386,386,386\n2020-03-28,false,430,430,430\n2020-03-29,false,447,447,447\n2020-03-30,false,520,520,520\n2020-03-31,false,877,877,877\n2020-04-01,false,900,962,830\n2020-04-02,true,1036,1130,926\n2020-04-03,true,1194,1333,1033\n2020-04-04,true,1360,1555,1133\n2020-04-05,true,1529,1790,1228\n2020-04-06,true,1699,2036,1309\n2020-04-07,true,1865,2288,1370\n2020-04-08,true,2025,2548,1423\n2020-04-09,true,2169,2797,1449\n2020-04-10,true,2296,3043,1461\n2020-04-11,true,2407,3281,1455\n2020-04-12,true,2496,3492,1425\n2020-04-13,true,2563,3687,1379\n2020-04-14,true,2610,3864,1328\n2020-04-15,true,2637,4016,1271\n2020-04-16,true,2644,4136,1216\n2020-04-17,true,2634,4235,1152\n2020-04-18,true,2607,4313,1092\n2020-04-19,true,2565,4365,1029\n2020-04-20,true,2512,4399,976\n2020-04-21,true,2448,4404,915\n2020-04-22,true,2375,4392,864\n2020-04-23,true,2296,4365,811\n2020-04-24,true,2213,4323,759\n2020-04-25,true,2127,4261,714\n2020-04-26,true,2039,4201,670\n2020-04-27,true,1951,4122,624\n2020-04-28,true,1864,4038,583\n2020-04-29,true,1779,3955,541\n2020-04-30,true,1695,3854,498\n2020-05-01,true,1614,3756,462\n2020-05-02,true,1537,3649,428\n2020-05-03,true,1463,3542,390\n2020-05-04,true,1391,3420,358\n2020-05-05,true,1323,3306,327\n2020-05-06,true,1256,3183,294\n2020-05-07,true,1194,3065,270\n2020-05-08,true,1133,2941,245\n2020-05-09,true,1073,2822,222\n2020-05-10,true,1015,2706,197\n2020-05-11,true,960,2586,176\n2020-05-12,true,908,2464,158\n2020-05-13,true,857,2341,143\n2020-05-14,true,808,2224,129\n2020-05-15,true,761,2105,111\n2020-05-16,true,715,1990,100\n2020-05-17,true,670,1877,85\n2020-05-18,true,628,1760,73\n2020-05-19,true,587,1652,64\n2020-05-20,true,548,1552,57\n2020-05-21,true,511,1459,50\n2020-05-22,true,478,1362,44\n2020-05-23,true,444,1270,36\n2020-05-24,true,414,1188,30\n2020-05-25,true,384,1103,25\n2020-05-26,true,356,1022,22\n2020-05-27,true,329,950,18\n2020-05-28,true,304,885,14\n2020-05-29,true,281,817,12\n2020-05-30,true,261,757,11\n2020-05-31,true,240,706,8\n2020-06-01,true,222,652,6\n2020-06-02,true,205,602,4\n2020-06-03,true,189,564,4\n2020-06-04,true,174,522,3\n2020-06-05,true,160,487,2\n2020-06-06,true,147,452,1\n2020-06-07,true,135,419,0\n2020-06-08,true,125,391,0\n2020-06-09,true,115,364,0\n2020-06-10,true,106,338,0\n2020-06-11,true,97,315,0\n2020-06-12,true,89,293,0\n2020-06-13,true,82,272,0\n2020-06-14,true,75,254,0\n2020-06-15,true,69,235,0\n2020-06-16,true,64,219,0\n2020-06-17,true,58,203,0\n2020-06-18,true,54,190,0\n2020-06-19,true,49,176,0\n2020-06-20,true,45,164,0\n2020-06-21,true,42,152,0\n2020-06-22,true,38,142,0\n2020-06-23,true,35,132,0\n2020-06-24,true,32,122,0\n2020-06-25,true,29,115,0\n2020-06-26,true,27,106,0\n2020-06-27,true,25,98,0\n2020-06-28,true,22,90,0\n2020-06-29,true,20,83,0\n2020-06-30,true,18,77,0\n2020-07-01,true,17,70,0\n2020-07-02,true,15,63,0\n2020-07-03,true,13,57,0\n2020-07-04,true,12,52,0\n2020-07-05,true,11,48,0\n2020-07-06,true,10,43,0\n2020-07-07,true,9,39,0\n2020-07-08,true,8,36,0\n2020-07-09,true,7,32,0\n2020-07-10,true,6,29,0\n2020-07-11,true,6,26,0\n2020-07-12,true,5,24,0\n2020-07-13,true,5,22,0\n2020-07-14,true,4,19,0\n2020-07-15,true,4,17,0", d3.autoType), {y: "↑ Deaths per day"});

    // console.log(data);

    d3.json("http://localhost:3000/d3_get_chart_source_data.json")
      .then(function(data) {
        drawChart('#test-chart-2', data);
       });

    function drawChart(container, data) {

      const height = 600;
      const width = 1200;
      const margin = ({top: 20, right: 30, bottom: 30, left: 40});

      const x = d3.scaleUtc()
        .domain([d3.min(data.actual_rates, d => Date.parse(d.rate_date)), d3.max(data.projected_rates, d => Date.parse(d.fulfillment_date))]) // X-axis should extend from the earliest ACTUAL interest rate date to the latest PROJECTED fulfillment_date
        .rangeRound([margin.left, width - margin.right]);

      const y = d3.scaleLinear()
        .domain([0,  d3.max([d3.max(data.projected_rates, d => Number(d.max)), d3.max(data.actual_rates, d => Number(d.actual_rate))])]) // Y-axis should extend to the highest rate from either the projected or actual rates
        .rangeRound([height - margin.bottom, margin.top])
        .clamp(true);

      xAxis = g => g
          .attr("transform", `translate(0,${height - margin.bottom})`)
          .call(d3.axisBottom(x).ticks(width / 80))
          .call(g => g.select(".domain").remove());

      yAxis = g => g
          .attr("transform", `translate(${margin.left},0)`)
          .call(d3.axisLeft(y).ticks(null, ".2f"))
          .call(g => g.select(".domain").remove())
          .call(g => g.append("text")
              .attr("x", -margin.left)
              .attr("y", 10)
              .attr("fill", "currentColor")
              .attr("text-anchor", "start")
              .text(data.actual_rates.y));

      grid = g => g
          .attr("stroke", "currentColor")
          .attr("stroke-opacity", 0.1)
          .call(g => g.append("g")
            .selectAll("line")
            .data(x.ticks())
            .join("line")
              .attr("x1", d => 0.5 + x(d))
              .attr("x2", d => 0.5 + x(d))
              .attr("y1", margin.top)
              .attr("y2", height - margin.bottom))
          .call(g => g.append("g")
            .selectAll("line")
            .data(y.ticks())
            .join("line")
              .attr("y1", d => 0.5 + y(d))
              .attr("y2", d => 0.5 + y(d))
              .attr("x1", margin.left)
              .attr("x2", width - margin.right));

      line = d3.line()
          .x(d => x(Date.parse(d.rate_date)))
          .y(d => y(Number(d.actual_rate)));

      // Define the shaded area around the projected line (technically it's around the actual line too, not just the projected portion of it, but the upper and lower bound y values are equal to the line's y values, so you can't see it)
      area = d3.area()
          .x(d => x(Date.parse(d.fulfillment_date)))
          .y0(d => y(Number(d.min)))
          .y1(d => y(Number(d.max)));

      const svg = d3.select(container).append("svg")
          .attr("viewBox", [0, 0, width, height])
          .attr("font-family", "sans-serif")
          .attr("font-size", 10)
          .attr("stroke-miterlimit", 1)
          .attr("width", width)
          .attr("height", height)
          .attr("style", "max-width: 100%; height: auto; height: intrinsic;");

      svg.append("g")
          .call(xAxis);

      svg.append("g")
          .call(yAxis);

      svg.append("g")
          .call(grid);

      svg.append("path")
          .attr("fill", "steelblue")
          .attr("fill-opacity", 0.2)
          .attr("d", area(data.projected_rates));

      // This is the actual data (up to April 1)
      svg.append("path")
          .attr("fill", "none")
          .attr("stroke", "steelblue")
          .attr("stroke-width", 1.5)
          .attr("d", line(data.actual_rates));



/*      // This is the projected data (after April 1)
      svg.append("path")
          .attr("fill", "none")
          .attr("stroke", "steelblue")
          .attr("stroke-width", 1.5)
          .attr("stroke-dasharray", "3,3")
          .attr("d", line(data.projected_rates));

      // Create the circle around April 1
      svg.append("circle")
          .attr("cx", x(observed.date))
          .attr("cy", y(observed.mean))
          .attr("r", 2.5);

      // Create the "900" text
      svg.append("text")
          .attr("x", x(observed.date))
          .attr("y", y(observed.mean))
          .attr("dx", 6)
          .attr("dy", "0.35em")
          .text(observed.mean.toLocaleString("en"));

      // Create the "April 1" text
      svg.append("text")
          .attr("x", x(observed.date))
          .attr("y", y(observed.mean))
          .attr("dx", 6)
          .attr("dy", "1.35em")
          .text(d3.utcFormat("%B %-d")(observed.date));*/

    }

  </script>

  <span class="label label-primary">Average FOMC Projections of Long-Term Rates</span>

  <div id="long_term_chart">
  </div>

  <span class="label label-primary">FOMC Projections and Actual Rates</span>

  <div id="fed_chart">
  </div>

  <span class="label label-primary">FOMC Projection Discrepancies</span>

  <div id="fed_chart2">
  </div>

  <!-- <script>

    var days_in_advance = <%= raw @chart_data.collect { |x| x[:days_in_advance] } %>;
    var begin_date = <%= raw @chart_data.collect { |x| x[:date_of_projection] } %>;

    var long_term_chart = c3.generate({
      bindto: '#long_term_chart',
      data: {
        xs: {
          'Average Long-Term Projection': 'x1'
        },
        columns: [
          <%= raw ['x1'].concat(@long_run.collect { |x| x[:present_date].strftime('%Y-%m-%d') }) %>,
          <%= raw ['Average Long-Term Projection'].concat(@long_run.collect { |x| x[:long_term].to_f }) %>
        ],
        xSort: false
      },
      axis: {
        x: {
          type: 'timeseries',
          tick: {
            format: '%Y-%m-%d',
            fit: false
          },
          label: {
            text: 'Projection Dates',
            position: 'outer-right'
          }
        },
        y: {
          label: {
            text: 'Average Projected Interest Rates',
            position: 'outer-top'
          }
        }
      },
      tooltip: {
        format: {
          title: function(d) { return d3.time.format("%B %e, %Y")(d) },
          value: function(d) { return d + "%" }
        },
        grouped: false
      }
    });

    var fed_chart = c3.generate({
      bindto: '#fed_chart',
      data: {
        xs: {
          'Actual Rate': 'x1',
          'Projected Rate': 'x2'
        },
        columns: [
          <%= raw ['x1'].concat(@date_info) %>,
          <%= raw ['x2'].concat(@chart_data.collect { |x| x[:projected_date] }) %>,
          <%= raw ['Actual Rate'].concat(@rate_info) %>,
          <%= raw ['Projected Rate'].concat(@chart_data.collect { |x| x[:projected_rate] }) %>
        ],
        xSort: false,
        color: function (color, d) {
          // d will be 'id' when called for legends
          return d.id && d.id === 'Projected Rate' ? d3.rgb(color).brighter(-days_in_advance[d.index] / 365) : color;
        }
      },
      zoom: {
        enabled: true
      },
      axis: {
        x: {
          type: 'timeseries',
          tick: {
            format: '%Y-%m-%d',
            fit: false
          },
          label: {
            text: 'Dates',
            position: 'outer-right'
          }
        },
        y: {
          label: {
            text: 'Interest Rates',
            position: 'outer-top'
          }
        }
      },
      tooltip: {
        format: {
          title: function(d) { return d3.time.format("%B %e, %Y")(d) },
          name: function (name, ratio, id, index) { if(name === 'Projected Rate') { return name + " on " + begin_date[index]; } else { return name; } },
          value: function(d) { return d + "%" }
        },
        grouped: false
      }
    });

    var fed_chart2 = c3.generate({
      bindto: '#fed_chart2',
      data: {
        xs: {
          Projections: 'Projections_x',
          Regression: 'Regression_x'
        },
        columns: [
          <%= raw ['Projections_x'].concat(@chart2_data.collect { |x| x[:days_in_advance] }) %>,
          <%= raw ['Projections'].concat(@chart2_data.collect { |x| x[:projection_discrepancy] }) %>,
          ['Regression_x', <%= @regression_data[:lowest_x] %> , 0],
          ['Regression', <%= (@regression_slope * @regression_data[:lowest_x]) + @y_intercept %> , <%= @y_intercept %>]
        ],
        type: 'scatter',
        types: {
          Regression: 'line'
        },
        colors: {
          Regression: '#BCB8B8'
        }
      },
      axis: {
        x: {
          label: {
            text: 'Days from Date of Projection to Expiration',
            position: 'outer-right'
          },
          tick: {
            fit: false
          }
        },
        y: {
          label: {
            text: 'Projected vs. Actual Interest Rates Differential',
            position: 'outer-top'
          }
        }
      },
      tooltip: {
        format: {
          title: function(d) { return Math.abs(d) + " Days Prior" },
          value: function(d) { return d3.round(d, 3) + "%  Discrepancy" }
        },
        grouped: false
      },
      legend: {
        hide: ['Regression']
      }
    });

  </script> -->

  <%= form_tag({controller: 'projections', action: 'index'}, method: 'get', id: 'trim_form', class: 'form-inline') do %>
    <div class="form-group">
    <%= label_tag(:trim, "Exclude # of outliers from each projection date/expiration date combination:") %>
    <%= select_tag(:trim, options_for_select([0,1,2,3,4,5,6,7], params.has_key?(:trim) ? params[:trim].to_i : 0), class: "form-control") %>
    </div>
  <% end %>

  <%= link_to "More Details", "javascript:void(0)", :onclick => "$(showDetails())", :role => "button", class: "btn btn-info" %>
  <div id="details"></div>

  <script>
    document.getElementById('trim').addEventListener('change', function() {
      document.getElementById('trim_form').submit();
    }, false);

    function showDetails() {

      if ($('#details').is(':empty')) {
        $('#details').empty().append("<%= escape_javascript(render partial: 'details') %>").hide().slideDown('fast');
      } else {
        $('#details').slideUp('fast').empty();
      }

    }
  </script>

</div>

<div class="col-md-3 hidden-xs hidden-sm" style="height:100%;">

  <!-- <span class="label label-primary"><%= link_to "Recent Statements", statements_path, style: "all: inherit" %></span>

  <table class="table table-striped">
    <thead>
      <tr>
        <th>Name</th>
        <th>Summary</th>
        <th>Lean</th>
        <th>Date</th>
      </tr>
    </thead>
    <tbody>
      <% Statement.order(statement_date: :desc).limit(5).each do |statement| %>
      <tr>
        <td><%= link_to statement.member.name, member_path(statement.member) %></td>
        <td><%= truncate(statement.summary, length: 50, separator: ' ') %> <%= link_to '<span class="glyphicon glyphicon-paperclip"></span>'.html_safe, statement.url, :target => "_blank" %></td>
        <td><%= statement.lean %></td>
        <td><%= statement.statement_date.strftime("%b %-d") %></td>
      </tr>
      <% end %>
    </tbody>
  </table>  -->
  <a class="twitter-timeline" data-height="800" href="https://twitter.com/TheFedProject/lists/fed-watchers?ref_src=twsrc%5Etfw">A Twitter List by TheFedProject</a> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</div>
